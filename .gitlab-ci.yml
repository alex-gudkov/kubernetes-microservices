stages:
    -   build-auth
    -   build-users
    -   build-wallets
    -   deploy

# definition of GitLab CI/CD workflow
workflow:
    # define the set of rules when the pipeline should run
    rules:
        -   if: $CI_COMMIT_BRANCH == "main" || ($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main")

build-auth:
    stage: build-auth
    image:
        # Kaniko builds images from Dockerfile inside containers
        # use debug version because it has shell
        name: gcr.io/kaniko-project/executor:v1.9.0-debug
        # entrypoint needs to be overridden
        entrypoint:
            -   ""
    script:
        # write kaniko config with needed credentials taken from predefined CI/CD variables 
        -   mkdir -p /kaniko/.docker
        -   echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        # build image and push to project container registry 
        -   /kaniko/executor
                --context "${CI_PROJECT_DIR}/apps/auth"
                --dockerfile "${CI_PROJECT_DIR}/apps/auth/Dockerfile"
                --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}/auth:latest"
build-users:
    stage: build-users
    image:
        name: gcr.io/kaniko-project/executor:v1.9.0-debug
        entrypoint:
            -   ""
    script:
        -   mkdir -p /kaniko/.docker
        -   echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        -   /kaniko/executor
                --context "${CI_PROJECT_DIR}/apps/users"
                --dockerfile "${CI_PROJECT_DIR}/apps/users/Dockerfile"
                --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}/users:latest"
build-wallets:
    stage: build-wallets
    image:
        name: gcr.io/kaniko-project/executor:v1.9.0-debug
        entrypoint:
            -   ""
    script:
        -   mkdir -p /kaniko/.docker
        -   echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
        -   /kaniko/executor
                --context "${CI_PROJECT_DIR}/apps/wallets"
                --dockerfile "${CI_PROJECT_DIR}/apps/wallets/Dockerfile"
                --destination "${CI_REGISTRY}/${CI_PROJECT_PATH}/wallets:latest"
deploy:
    stage: deploy
    image:
        # use Kubernetes command-line tool image
        name: bitnami/kubectl:latest
        entrypoint:
            -   ""
    script:
        # prepare
        -   kubectl config get-contexts
        -   kubectl config use-context alex-gudkov/kubernetes-microservices:primary-agent
        # delete pods
        -   kubectl delete --filename "${CI_PROJECT_DIR}/kubernetes/auth"
        -   kubectl delete --filename "${CI_PROJECT_DIR}/kubernetes/users"
        -   kubectl delete --filename "${CI_PROJECT_DIR}/kubernetes/wallets"
        # update using services 
        -   kubectl apply --filename "${CI_PROJECT_DIR}/kubernetes/postgres"
        -   kubectl apply --filename "${CI_PROJECT_DIR}/kubernetes/redis"
        -   kubectl apply --filename "${CI_PROJECT_DIR}/kubernetes/rabbitmq"
        # create pods
        -   kubectl create --filename "${CI_PROJECT_DIR}/kubernetes/auth"
        -   kubectl create --filename "${CI_PROJECT_DIR}/kubernetes/users"
        -   kubectl create --filename "${CI_PROJECT_DIR}/kubernetes/wallets"
        # update ingress-nginx ingress controller
        -   kubectl apply --filename "${CI_PROJECT_DIR}/kubernetes/ingress-nginx.yaml"
        # check status
        -   kubectl get pods
        -   kubectl get services
        -   kubectl get ingress
